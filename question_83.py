
__author__ = 'Черепанов Дмитрий Евгеньевич'

''' 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на
наличие только чисел. Проверить работу исключения на реальном примере. Запрашивать у
пользователя данные и заполнять список необходимо только числами. Класс-исключение
должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока
пользователь сам не остановит работу скрипта, введя, например, команду «stop». При этом
скрипт завершается, сформированный список с числами выводится на экран.
Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа
элемента. Вносить его в список, только если введено число. Класс-исключение должен не
позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.'''


class MyValueError(Exception):
    def __init__(self, text=None):
        self.txt = text


    @staticmethod
    def is_float(item):
        try:
            float_ = float(item)
        except ValueError:
            raise MyValueError('Item is not a number')
        return float_


if __name__ == '__main__':
    list_ = []
    while True:
        item = input('List item (enter stop to end input): ')
        if item == 'stop':
            break
        try:
            float_ = MyValueError().is_float(item)
            list_.append(float_)
        except Exception as e:
            print(e)
    print(f'List: {list_}')
